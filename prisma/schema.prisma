generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(uuid())
  email         String             @unique
  isActive      Boolean            @default(false)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  isSuperAdmin  Boolean            @default(false)
  credential    Credential?
  refreshTokens RefreshToken[]
  resourceRoles UserResourceRole[]
  details       UserDetails?
  subordinates  UserDetails[]      @relation("ManagerSubordinates")
  verification  UserVerification?
}

model UserDetails {
  id            String    @id
  firstName     String?
  lastName      String?
  nickName      String?
  contactNumber String?
  reportToId    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [id], references: [id], onDelete: Cascade)
  reportTo      User?     @relation("ManagerSubordinates", fields: [reportToId], references: [id], onDelete: SetNull)

  @@unique([id])
}

model Credential {
  id           String @id @default(cuid())
  userId       String @unique
  passwordHash String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resource {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  userRoles   UserResourceRole[]
}

model Role {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  permissions String[]
  userRoles   UserResourceRole[]

  @@unique([name], map: "Role_name_unique")
}

model UserResourceRole {
  id         String    @id @default(cuid())
  userId     String
  resourceId String?
  roleId     String
  resource   Resource? @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId, resourceId])
}

model RefreshToken {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserVerification {
  id                      String    @id @default(uuid())
  userId                  String    @unique
  isEmailVerified         Boolean   @default(false)
  emailVerificationDate   DateTime?
  isContactVerified       Boolean   @default(false)
  contactVerificationDate DateTime?
  isReporterAssigned      Boolean   @default(false)
  verificationStatus      String    @default("unverified") // unverified, verified, failed
  userStatus              String    @default("pending") // pending, active, blocked, closed
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
