generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String             @id @default(uuid())
  email          String             @unique
  isActive       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  credential     Credential?
  refreshTokens  RefreshToken[]
  resourceRoles  UserResourceRole[]

  // SuperAdmin flag
  isSuperAdmin   Boolean            @default(false)
}

model Credential {
  id           String @id @default(cuid())
  userId       String @unique
  passwordHash String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resource {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  roles       Role[]
  userRoles   UserResourceRole[]
}

model Role {
  id          String             @id @default(cuid())
  name        String
  description String?
  resourceId  String?
  resource    Resource?          @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  permissions String[]           // Array of permission strings
  userRoles   UserResourceRole[]

  @@unique([name, resourceId]) // role name unique per resource
}

model UserResourceRole {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Resource? @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String?
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String

  @@unique([userId, roleId, resourceId]) // unique role per resource per user
}

model RefreshToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  tokenHash String
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime @default(now())
}
