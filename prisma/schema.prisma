generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(uuid())
  email         String             @unique
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  isSuperAdmin  Boolean            @default(false)
  credential    Credential?
  refreshTokens RefreshToken[]
  resourceRoles UserResourceRole[]
}

model Credential {
  id           String @id @default(cuid())
  userId       String @unique
  passwordHash String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resource {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  roles       Role[]
  userRoles   UserResourceRole[]
}

model Role {
  id          String             @id @default(cuid())
  name        String
  description String?
  resourceId  String?
  permissions String[]
  resource    Resource?          @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  userRoles   UserResourceRole[]

  @@unique([name, resourceId])
}

model UserResourceRole {
  id         String    @id @default(cuid())
  userId     String
  resourceId String?
  roleId     String
  resource   Resource? @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId, resourceId])
}

model RefreshToken {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
