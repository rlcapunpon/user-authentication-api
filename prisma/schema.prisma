// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  organizationCode String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  credential    Credential?
  roles         UserRole[]
  refreshTokens RefreshToken[]
}

model Credential {
  id           String @id @default(cuid())
  userId       String @unique
  passwordHash String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  roles       RolePermission[]
}

model UserRole {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String

  @@id([userId, roleId])
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  @@id([roleId, permissionId])
}

model RefreshToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  tokenHash String
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime @default(now())
}